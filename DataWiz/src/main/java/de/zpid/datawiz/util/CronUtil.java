package de.zpid.datawiz.util;

import de.zpid.datawiz.dao.AdminDAO;
import de.zpid.datawiz.dao.UserDAO;
import de.zpid.datawiz.service.AdminService;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.net.InetAddress;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

@Component
public class CronUtil {
    private static final Logger log = LogManager.getLogger(CronUtil.class);
    private final EmailUtil emailUtil;
    private final AdminService adminService;
    private final AdminDAO adminDAO;
    private final UserDAO userDAO;
    private final Environment env;

    @Autowired
    public CronUtil(final EmailUtil emailUtil, final AdminService adminService, final UserDAO userDAO, final AdminDAO adminDAO, final Environment env) {
        this.emailUtil = emailUtil;
        this.adminService = adminService;
        this.userDAO = userDAO;
        this.adminDAO = adminDAO;
        this.env = env;
    }

    /**
     * Administration Statistik Cronjob - scheduled on 1st of month at 1am.
     */
    @Scheduled(cron = "0 0 1 1 * *")
    public void lastLoginCron() {
        try {
            LocalDateTime date = LocalDateTime.now();
            int month = date.getMonthValue();
            int year = date.getYear();
            log.info("Starting DataWiz Cronjob for application Statistics date [{}.{}]", () -> month, () -> year);
            StringBuilder sb = new StringBuilder();
            AtomicInteger usrWithProCount = new AtomicInteger(0);
            AtomicInteger usrlastMonthLogin = new AtomicInteger(0);
            userDAO.findAll().parallelStream().forEach((user) -> {
                        if (adminService.countProjectsByUser(user.getId()) > 0)
                            usrWithProCount.addAndGet(1);
                        if (user.getLastLogin().compareTo(date.minusMonths(1)) > 0)
                            usrlastMonthLogin.addAndGet(1);
                    }
            );
            int currentUsers = adminService.countValuesByTableName("dw_user");
            int currentProjects = adminService.countValuesByTableName("dw_project");
            int currentStudies = adminService.countValuesByTableName("dw_study");
            int currentRecords = adminService.countValuesByTableName("dw_record");
            adminDAO.deleteMonthlyStatsValues(month, year);
            Map<String, Integer> lastMonth = adminDAO.findStatsOfLastMonth();
            List<Map<String, Integer>> lastYear = adminDAO.findStatsOfLastYear();
            sb.append("<p>This mail contains the monthly statistics that are automatically generated by a DataWiz cronjob.</p>");
            sb.append("<b>DataWiz at a Glance:</b>");
            sb.append("<table width=\"100%\" style=\"border: 1px solid black;border-collapse: collapse;\">");
            sb.append("<tr style=\"border: 1px solid black;\">");
            sb.append("<th align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append("Total users").append("</th>");
            sb.append("<th align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append("Users with Projects").append("</th>");
            sb.append("<th align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append("Projects").append("</th>");
            sb.append("<th align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append("Studies").append("</th>");
            sb.append("<th align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append("Records(Versions)").append("</th>");
            sb.append("</tr>");
            sb.append("<tr style=\"border: 1px solid black;\">");
            sb.append("<td align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append(currentUsers).append("</td>");
            sb.append("<td align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append(usrWithProCount.get()).append("</td>");
            sb.append("<td align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append(currentProjects).append("</td>");
            sb.append("<td align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append(currentStudies).append("</td>");
            sb.append("<td align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append(currentRecords).append("(")
                    .append(adminService.countValuesByTableName("dw_record_metadata")).append(")</td>");
            sb.append("</tr>");
            sb.append("</table>");
            sb.append("<div>&nbsp;</div>");
            sb.append("<div>&nbsp;</div>");
            // Content added
            if (lastMonth != null && !lastMonth.isEmpty()) {
                sb.append("<b>Last month overview:</b>");
                sb.append("<table width=\"100%\" style=\"border: 1px solid black;border-collapse: collapse;\">");
                sb.append("<tr style=\"border: 1px solid black;\">");
                sb.append("<th align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append("New users").append("</th>");
                sb.append("<th align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append("Logged in Users").append("</th>");
                sb.append("<th align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append("New projects").append("</th>");
                sb.append("<th align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append("New studies").append("</th>");
                sb.append("<th align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append("New records").append("</th>");
                sb.append("</tr>");
                sb.append("<tr style=\"border: 1px solid black;\">");
                sb.append("<td align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append(currentUsers - lastMonth.get("users")).append("</td>");
                sb.append("<td align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append(usrlastMonthLogin).append("</td>");
                sb.append("<td align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append(currentProjects - lastMonth.get("projects")).append("</td>");
                sb.append("<td align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append(currentStudies - lastMonth.get("studies")).append("</td>");
                sb.append("<td align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append(currentRecords - lastMonth.get("records")).append("</td>");
                sb.append("</tr>");
                sb.append("</table>");
                sb.append("<div>&nbsp;</div>");
                sb.append("<div>&nbsp;</div>");
            }
            // last Year
            if (lastYear != null && !lastYear.isEmpty()) {
                sb.append("<b>Overview of the past 12 months:</b>");
                sb.append("<table width=\"100%\" style=\"border: 1px solid black;border-collapse: collapse;\">");
                sb.append("<tr style=\"border: 1px solid black;\">");
                sb.append("<th align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append("Month/Year").append("</th>");
                sb.append("<th align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append("Users(total/new)").append("</th>");
                sb.append("<th align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append("Projects(total/new)").append("</th>");
                sb.append("<th align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append("Studies(total/new)").append("</th>");
                sb.append("<th align=\"right\" style=\"padding: 2px;border: 1px solid black;\">").append("Records(total/new)").append("</th>");
                sb.append("</tr>");
                AtomicInteger count = new AtomicInteger(0);
                lastYear.forEach(tmp -> {
                    sb.append("<tr style=\"border: 1px solid black;\">");
                    sb.append("<td align=\"right\" style=\"padding: 2px;border: 1px solid black;\">")
                            .append(tmp.get("month")).append("/").append(tmp.get("year"))
                            .append("</td>");
                    sb.append("<td align=\"right\" style=\"padding: 2px;border: 1px solid black;\">")
                            .append(tmp.get("users"))
                            .append("/")
                            .append((count.get() < lastYear.size() - 1) ? (tmp.get("users") - lastYear.get(count.get() + 1).get("users")) : tmp.get("users"))
                            .append("</td>");
                    sb.append("<td align=\"right\" style=\"padding: 2px;border: 1px solid black;\">")
                            .append(tmp.get("projects"))
                            .append("/")
                            .append((count.get() < lastYear.size() - 1) ? (tmp.get("projects") - lastYear.get(count.get() + 1).get("projects")) : tmp.get("projects"))
                            .append("</td>");
                    sb.append("<td align=\"right\" style=\"padding: 2px;border: 1px solid black;\">")
                            .append(tmp.get("studies"))
                            .append("/")
                            .append((count.get() < lastYear.size() - 1) ? (tmp.get("studies") - lastYear.get(count.get() + 1).get("studies")) : tmp.get("studies"))
                            .append("</td>");
                    sb.append("<td align=\"right\" style=\"padding: 2px;border: 1px solid black;\">")
                            .append(tmp.get("records"))
                            .append("/")
                            .append((count.get() < lastYear.size() - 1) ? (tmp.get("records") - lastYear.get(count.get() + 1).get("records")) : tmp.get("records"))
                            .append("</td>");
                    sb.append("</tr>");
                    count.incrementAndGet();
                });
                sb.append("</table>");
            }
            adminDAO.saveMonthlyStatsValues(month, year, currentUsers, currentProjects, currentStudies, currentRecords);
            emailUtil.sendSSLMail(env.getRequiredProperty("organisation.admin.email"), "DataWiz Monthly Statistics (Server: " +
                    InetAddress.getLocalHost() + ")", sb.toString());
            log.info("Leaving DataWiz Cronjob for application Statistics date [{}.{}]", () -> month, () -> year);
        } catch (Exception e) {
            log.fatal("Cronjob Exception", () -> e);
        }
    }

}
